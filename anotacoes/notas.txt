Uma função criada dentro da pasta pages é interpretada como um página pelo Next então ela pode ser acessada 
diretamente na url principal do aplicativo sem a necessidade de referencia no arquivo index.

Nessa aula foi alterada a localização do compomenet primieero para de ntro da pasta basicos então nesse caso 
eu não posso mais acessar ela diretamente eu tenho que digitar na url o nome da pasta onde o componete está para 
que ele seja renderizado.

Atenção:

Apartir da versão 17 não é mais necessário importar ele dentro do componente quando for usar o jsx  por isso 
que nos componentes que eu estou fazendo não existe a linha. 

import React from 'React';

Produtividade 

Criar so arquivos de componentes usando a extenção jsx faz com que o vscode auxilie usando o auto complete na hora de  
construir um componente. 

Dentro da pasta pages eu criei um diretório "/basicos" e todos os compomentes dentro dele tem o nome minusculo porque 
esses composnetes serão acessados atráves de uma url, como foi dito antes os componentes dessa pasta podem ser acessados de 
forma direta pelo navegador, para que eu crie componentes de fato eles devem ser criados dentro da pasta Components.

Se foram criados dentro da pasta pages vão funcionar normalmente porém a estrutura do projeto ficará confusa, os componentes
devem ter a primenra letra do nome em caixa alta por convenção.

Passagem de parametros para um componente 

Essa é uma função que vai chamar o componente Titulo oa parametros passados nela são 

1 - principal 
2 - secondario 

Embora sejam dois parametros qua eu mesmo declarei explicitamente eles vaõ cehgar lá como 
atributos de um objeto  

---------------------------------------------------------------------------
export default function usandoTitulo(){

    return <>
             <Titulo
               principal="Página de cadastro"
               secondario="Incluir,Aterar e excluir coisas"
             />
           </>
}
---------------------------------------------------------------------------------

Recebendo os parametros 

Aqui no componente eles vão chegar dentro do objeto props 
e apartir desse objeto eu posso mostrar o conteudo dos atributos 
como eu estou fazendo abaixo 

----------------------------------------------------------------------------------------------

export default function Titulo(props){

 
  /*
   o retorno abaixo mostra os valores que vieram dentro do objeto props
  */
    return <>
             <h1>{props.principal}</h1>
             <h2>{props.secondario}</h2>
           </>
}
--------------------------------------------------------------

Sobre css 

Nas regras do next o css não pode ser importado diretamente no componente então nesse caso para que possa usar
eu tenho que importar ele dentro do arquivo _app.tsx.
Nesse caso ele está sendo usado de forma global.

Para que o css seja aplicado somente para um componente especifico é necessário:
1 - criar o arquivo css dessa forma <nome do arquivo>.module.css 
2 - importar ele deentro do componente como se fosse um modulo 

   import estilos from "./integracao2.module.css";  

3 - acessar a classe desejada como se ela fosse um atributo dele, por exemplo o objeto estilos
    possui alguma classes de estilização, mas nessa tag h1 eu quero a classe 'branca2' então é 
    assim que deve ser feito:  

    <h1 className={estilos.branca2} >texto#03</h1>


    mesmo sendo um id ele é tratado da mesma forma 
---------------------------------------------------------------------------------------------------

Propriedades de componentes são somente para leitura,o objeto props que chega no componente só serve para 
ser lido e não para ser editado. Uma forma de mexer nos valores pode ser na hora da exibição por exemplo 
se eu passo um numero pra um componente pelo props.

<componenteExemplo numero={1} />

e lá no componente eu tento alterar o valor somando 1 a propriedade numero, vai dar erro   



export default function componenteExemplo(props){

    props.numero ++

    return <div> { props.numero } </div>;
}


o unico jeito de alterar nessa situação seria no momento da exibição porém esse não é o jeito certo de fazer isso 
porque o valor é exibido de forma diferente más a propridade não é alterada de fato, para fazer isso eu teria de manipular o estado 
do componente 


export default function componenteExemplo(props){

    return <div> { props.numero + 1 } </div>;
}

----------------------------------------------------------------------------------------
Existem componentes que são compostos por outros 
no meu caso eu eu usei uma lista que para ser exibida precisa de 3 componentes
existe uma forma mais simples de fazer isso mas eu fiz com fins de aprendizado 

1 - componenteComFilho.jsx (é basicamente um compnete que só mostra uma div vazia que vai receber o componete Lista eo componente item )

export default function componenteComFilhos(){
    return(
        <div>
        </div>
    )
}

2 - componente Lista.jsx (Esse compomenet é uma lista <ul> vazia que será composta pelo compoente Item ) 

export default function Lista(props){

 
     return(
        <ul>
        
        </ul>
     )
}

3 - componente item (Esse compomente retorna um elemento <li> vázio que vai compor a lista)


export default function Item(props){
    return(
    <li>{props.conteudo}</li>
   )
}

------------------------------------------------------------------------------------------------------
Agora esse eo componente completo 

import Lista from "../../Components/Lista";
import Item from "../../Components/Item";

/*
Esse componente usa dois outros componentes para compor uma lista   

*/

export default function componenteComFilhos(){
    return(
        <div>
            <Lista>
                <Item conteudo="Item #1" ></Item>
                <Item conteudo="Item #2" ></Item>
                <Item conteudo="Item #3" ></Item>
                <Item conteudo="Item #4" ></Item>
            </Lista>
        </div>
    )
}

----------------------------------------------------------------------------------
No caso do componete lista elel não mostra um dados que ele recebe no porps e sim um componete inteiro 
se fosse so um dado bastava pegar uma porpriedade do props e mostrar, porém quando um componente precisa
mostrar outro, esse componete se torna um filho.

No caso o componente pai seria a Lista e o componente filho seria o item que pertence a ela então para que o item 
apareça eu uso o objeto props porém eu informo que literalmente ele deve mostrar o filho dentro da ul assim todos 
os Itens gerados vão se tornar um item da lista.  

export default function Lista(props){

     return(
        <ul>
          {props.children}
        </ul>
     )
}
---------------------------------------------------------------------------
Padrões de exportação ECMA 

quando uma função é expotada por padrão dentro de um arquivo eu posso importar ela dessa forma 

import padrao from "./local_do_arquivo";

porém quando um função não é exportada por padrão ela deve ser acessada dessa forma 

import {padrao} from "./local_do_arquivo";
------------------------------------------------------------------------------
configurando um projeto para usar typescrypt

1 - crie um arquivo na araiz do porjeto chamado tsconfig.json 
2 - quando o porjeto for executado o node vai detectar esse arquivo e vai pedir para 
    que voce instale as dependencias necessarias para usar o typescrypt.
3 - depois de instalar as dependencias ele vai preencher as configurações de forma automática
    assim é possivel usar arquivos .tsx 

--------------------------------------------------------------------------------
Api  
O Next possui uma api interna que pode ser acessada pelos componentes sem o uso do cors  














































